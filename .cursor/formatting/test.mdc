---
globs: ['**/*.test*.ts', '**/*.spec*.ts', '**/*.test*.js', '**/*.spec*.js']
alwaysApply: true
---

# Test File Formatting Rules

## 1. :: Test File Structure Template

### 1.1. :: Required Test File Format <!-- Start Fold -->

**✅ CORRECT - Use this exact structure for all test files**:

```typescript
import { describe, it, expect, afterEach, beforeEach } from 'vitest'

describe('[Top Level Describe]', () => {
    // SETUP ---------------------->>

    // let [exampleManager]: [exampleManagerType]
    // let [exampleManager2]: [exampleManager2Type]

    beforeEach(() => { //>

    }) //<

    afterEach(() => { //>

    }) //<

    //----------------------------------------------------<<

    describe('[Nested Describe]', () => {

        it('[Test description]', () => { //>
            [Test Contents]
            [Test Contents]
            [Test Contents]
            [Test Contents]

        }) //<
        it('[Another Test description]', () => { //>

            [Test Contents]
            [Test Contents]
            [Test Contents]
            [Test Contents]

        }) //<
        it('[Another Test description]', () => { //>

            [Test Contents]
            [Test Contents]
            [Test Contents]
            [Test Contents]

        }) //<

    })

    describe('[Second Nested Describe]', () => {

        it('[Test description]', () => { //>

            [Test Contents]
            [Test Contents]
            [Test Contents]
            [Test Contents]

        }) //<
        it('[Another Test description]', () => { //>

            [Test Contents]
            [Test Contents]
            [Test Contents]
            [Test Contents]

        }) //<
        it('[Another Test description]', () => { //>

            [Test Contents]
            [Test Contents]
            [Test Contents]
            [Test Contents]

        }) //<

    })

})
```

**❌ INCORRECT - Don't use these variations**:

```typescript
// Missing imports
describe('[Top Level Describe]', () => {
    it('[Test description]', () => {
        // Missing setup section
    })
})

// Missing folding markers
describe('[Top Level Describe]', () => {
    beforeEach(() => {
        // Missing //> and //< markers
    })

    it('[Test description]', () => {
        // Missing //> and //< markers
    })
})

// Missing blank line spacing
describe('[Top Level Describe]', () => {
    beforeEach(() => {
        //>
    }) //<
    it('[Test description]', () => {
        //>
    }) //<
})
```

**ℹ️ Rationale**: <!-- Start Fold -->

- Consistent structure ensures maintainable test files
- Folding markers (`//>` `//<`) enable code folding in editors
- Setup section separators (`//-->>` `//--<<`) clearly delineate test setup
- Blank line spacing improves readability and visual separation
- Bracket placeholders provide clear guidance for content
- Nested describe blocks organize related tests logically

<!-- Close Fold: Rationale -->

<!-- Close Fold: Required Test File Format -->

### 1.2. :: Test File Content Guidelines <!-- Start Fold -->

**✅ CORRECT - Follow these content rules**:

- **Import Statement**: Always start with `import { describe, it, expect, afterEach, beforeEach } from 'vitest'`
- **Top Level Describe**: Use `[Top Level Describe]` format for main describe block
- **Setup Section**: Include commented variable declarations and lifecycle hooks
- **Folding Markers**: Use `//>` and `//<` around all code blocks
- **Setup Separators**: Use `//-->>` and `//--<<` to mark setup section boundaries
- **Nested Describes**: Use `[Nested Describe]` format for grouping related tests
- **Test Descriptions**: Use `[Test description]` format for individual test cases
- **Blank Line Spacing**: Maintain intentional blank lines for visual separation
- **Bracket Placeholders**: Keep brackets for all placeholder content

**✅ CRITICAL FORMATTING REQUIREMENTS**:

- **Setup Separator Generation**: Use the helper script to generate correct setup separators: `. .cursor/_ai-helpers/generate-setupFoldMarker.ps1; generate-setupFoldMarker "describe('[YourDescribeName]', () => {"`
- **Setup Separator Alignment**: `// SETUP ---------------------->>` must align with the opening brace `{` of the describe block (4-space indentation)
- **Folding Marker Placement**: `//>` must be on the same line as the opening brace `{` in test cases: `it('description', () => { //>`
- **No Extra Blank Lines**: Do NOT add blank lines after `//>` - content should start immediately on the next line
- **Consistent Spacing**: Use exactly one blank line between consecutive test cases (no extra spacing)
- **Setup Separator Length**: Use dynamic calculation based on describe line length
- **Setup Separator Formula**: Use PowerShell formula: `("    // SETUP " + "-" * (($describeLineContents).Length - 15) + ">>")`
    - Set `$describeLineContents = "describe('[YourDescribeName]', () => {"` with the exact describe line content
    - The formula calculates the exact number of dashes needed to align `>>` with the end of the describe line
    - Example: `$describeLineContents = "describe('AliasManagerService', () => {"` produces `    // SETUP ------------------------>>`
- **Closing Separator**: Use exactly `//----------------------------------------------------<<` (52 dashes)

**❌ INCORRECT - Avoid these patterns**:

- Missing vitest imports
- Skipping setup section
- Missing folding markers
- Inconsistent spacing
- Missing setup separators
- Unclear test descriptions

**❌ CRITICAL ANTI-PATTERNS**:

- **Wrong Setup Alignment**: `// SETUP ---->>` with wrong indentation (not aligned with describe brace)
- **Folding Marker on New Line**: `//>` on a separate line instead of same line as opening brace
- **Extra Blank Lines**: Blank lines after `//>` before test content starts
- **Inconsistent Spacing**: Multiple blank lines between consecutive test cases
- **Wrong Separator Length**: Using `// SETUP ---->>` instead of `// SETUP ---------------------->>`
- **Setup Separator Misalignment**: `// SETUP ---------------------->>` not aligned with describe block brace

<!-- Close Fold: Test File Content Guidelines -->

### 1.3. :: Test File Trigger Scenarios <!-- Start Fold -->

**Apply this formatting when**:

- **Creating skeleton test files** - Use template for new test file requests
- **Generating new test files** - Apply template to newly created test files
- **Modifying existing test files** - Reformats files that don't match the structure
- **Test file restructuring** - When reorganizing test file structure

**Implementation**: Always use the exact template structure with:

````typescript
;```typescript
import { describe, it, expect, afterEach, beforeEach } from 'vitest'

describe('[Top Level Describe]', () => {
    // SETUP ---------------------->> 

    // let [exampleManager]: [exampleManagerType]
    // let [exampleManager2]: [exampleManager2Type]
    
    beforeEach(() => { //>
        
    }) //<

    afterEach(() => { //>
        
    }) //<
    
    //----------------------------------------------------<<
    
    describe('[Nested Describe]', () => {

        it('[Test description]', () => { //>
            [Test Contents]
            [Test Contents]
            [Test Contents]
            [Test Contents]
            
        }) //<
        it('[Another Test description]', () => { //>
            
            [Test Contents]
            [Test Contents]
            [Test Contents]
            [Test Contents]
            
        }) //<
        it('[Another Test description]', () => { //>
            
            [Test Contents]
            [Test Contents]
            [Test Contents]
            [Test Contents]
            
        }) //<
    
    })

    describe('[Second Nested Describe]', () => {

        it('[Test description]', () => { //>
            
            [Test Contents]
            [Test Contents]
            [Test Contents]
            [Test Contents]
            
        }) //<
        it('[Another Test description]', () => { //>
            
            [Test Contents]
            [Test Contents]
            [Test Contents]
            [Test Contents]
            
        }) //<
        it('[Another Test description]', () => { //>
            
            [Test Contents]
            [Test Contents]
            [Test Contents]
            [Test Contents]
            
        }) //<
    
    })

})
```
````

<!-- Close Fold: Test File Trigger Scenarios -->

### 1.4. :: Additional Guidelines <!-- Start Fold -->

- **File Extensions**: Applies to `.test.ts`, `.spec.ts`, `.test.js`, `.spec.js` files
- **Folding Markers**: Always include `//>` and `//<` around code blocks
- **Setup Separators**: Always include `//-->>` and `//--<<` for setup sections
- **Blank Line Spacing**: Maintain intentional blank lines for readability
- **Bracket Placeholders**: Keep all placeholder content in brackets
- **Consistent Indentation**: Use 4-space indentation throughout
- **Import Order**: Always start with vitest imports
- **Structure Preservation**: Don't modify the template structure

<!-- Close Fold: Additional Guidelines -->

---
