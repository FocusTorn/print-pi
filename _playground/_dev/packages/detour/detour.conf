##> FILE DETOUR MANAGER CONFIGURATION
 # Unified configuration for all file detours, includes, and system management
 # 
 # This file defines how your custom files are transparently detoured over the
 # original framework files, allowing for easy updates and clean separation.
 #
 # CLI COMMANDS (Global command available):
 #   detour apply    - Creates all file redirects, adds include directives, manages services
 #   detour remove   - Removes all file redirects, removes include directives, stops services
 #   detour status   - Shows current system state (which files are redirected/included)
 #   detour help     - Shows detailed usage information and examples
 #
 #>

# ┌────────────────────────────────────────────────────────────────────────────────────────────────┐
# │                                 FILE DETOURS (Bind Mounts)                                   │
# └────────────────────────────────────────────────────────────────────────────────────────────────┘
## DOCUMENTATION: #>
 #
 # DESCRIPTION:
 #   Creates transparent file redirection using bind mounts. When applications
 #   read the original file, they actually get your custom version. The original
 #   framework files remain completely untouched and can be safely updated.
 #
 # SYNTAX:
 #   detour <original_file_path> = <detour_path>
 #
 # HOW IT WORKS:
 #   - Original file: /etc/example.conf
 #   - Custom file: /home/pi/_playground/configs/example.conf  
 #   - Result: Reading original gets custom content transparently
 #
 #<







# Example detours (uncomment to use):
# detour /boot/firmware/config.txt = /home/pi/_playground/boot/config.txt
# detour /home/pi/homeassistant/configuration.yaml = /home/pi/_playground/homeassistant/configuration.yaml

# ┌────────────────────────────────────────────────────────────────────────────────────────────────┐
# │                                   INCLUDE DIRECTIVES                                          │
# └────────────────────────────────────────────────────────────────────────────────────────────────┘
## DOCUMENTATION: #>
 #
 # DESCRIPTION:
 #   Programmatically injects include statements into existing files. This allows
 #   you to extend configuration files without modifying their core content.
 #
 # SYNTAX:
 #   include <target_file_path> : <include_file_path>
 #
 # HOW IT WORKS:
 #   - Target file: /boot/firmware/config.txt
 #   - Include file: /home/pi/_playground/boot/boot-mods.txt
 #   - Result: Adds "include boot-mods.txt" to the end of config.txt
 #
 #<

# Example includes (uncomment to use):
# include /boot/firmware/config.txt : /home/pi/_playground/boot/boot-mods.txt

# ┌────────────────────────────────────────────────────────────────────────────────────────────────┐
# │                                  SERVICE MANAGEMENT                                           │
# └────────────────────────────────────────────────────────────────────────────────────────────────┘
## DOCUMENTATION: #>
 #
 # DESCRIPTION:
 #   Manages system services as part of the overlay application process.
 #
 # SYNTAX:
 #   service <service_name> : <action>
 #
 # AVAILABLE ACTIONS:
 #   start   - Start the service
 #   stop    - Stop the service  
 #   restart - Restart the service
 #   reload  - Reload service configuration
 #
 #<

# Example services (uncomment to use):
# service homeassistant : restart


