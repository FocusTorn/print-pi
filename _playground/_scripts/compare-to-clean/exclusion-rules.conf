# Exclusion Rules Configuration
# This file defines patterns and rules to automatically classify files as system vs user modifications

# === SYSTEM MODIFICATION PATTERNS ===
# These patterns indicate files were modified by the system, not the user

# === GUARANTEED SYSTEM FILES (always system-managed) ===

# System Cache Files (GUARANTEED - always auto-generated)
SYSTEM_PATTERNS=(
    "/etc/ld.so.cache"
    "/var/cache/*"
    "/tmp/*"
    "/run/*"
)

# === COMMENTED OUT - TOO FUZZY ===
# Uncomment these if you want automatic exclusion of these file types

# # CUPS Printer System Files (FUZZY - could be manually edited)
# SYSTEM_PATTERNS+=(
#     "/etc/cups/printers.conf"
#     "/etc/cups/subscriptions.conf"
#     "/etc/cups/ppd/*.ppd"
#     "/etc/cups/printers.conf.O"
#     "/etc/cups/subscriptions.conf.O"
# )

# # Package Management Files (FUZZY - shells/mailcap could be manually edited)
# SYSTEM_PATTERNS+=(
#     "/etc/mailcap"
#     "/etc/shells"
#     "/var/lib/dpkg/*"
#     "/var/log/apt/*"
# )

# # System Account Files (FUZZY - could be manually edited for recovery/custom setups)
# SYSTEM_PATTERNS+=(
#     "/etc/passwd"
#     "/etc/passwd-"
#     "/etc/group"
#     "/etc/group-"
#     "/etc/gshadow"
#     "/etc/gshadow-"
#     "/etc/shadow"
#     "/etc/shadow-"
# )

# # System Service Files (FUZZY - could contain user customizations)
# SYSTEM_PATTERNS+=(
#     "/etc/systemd/system/*"
#     "/run/systemd/*"
#     "/var/lib/systemd/*"
# )

# # Network Configuration (FUZZY - could be manually configured)
# SYSTEM_PATTERNS+=(
#     "/etc/resolv.conf"
#     "/etc/hostname"
#     "/var/lib/dhcp/*"
# )

# === USER MODIFICATION PATTERNS ===
# These patterns indicate files were likely modified by the user

USER_PATTERNS=(
    "/etc/fstab"
    "/etc/hosts"
    "/etc/ssh/sshd_config"
    "/etc/nginx/*"
    "/etc/apache2/*"
    "/home/*/.bashrc"
    "/home/*/.zshrc"
    "/home/*/.profile"
    "/home/*/.config/*"
)

# === ABSOLUTE VALIDATION METHODS ===
# These functions provide 100% certainty about modification source

# Check if file has system-generated backup (.O, -, .bak, etc.)
has_system_backup() {
    local file="$1"
    local dir=$(dirname "$file")
    local basename=$(basename "$file")
    
    # Check for common backup patterns
    [[ -f "${file}.O" ]] || \
    [[ -f "${file}-" ]] || \
    [[ -f "${file}.bak" ]] || \
    [[ -f "${file}.orig" ]] || \
    [[ -f "${dir}/.${basename}.O" ]] || \
    [[ -f "${dir}/.${basename}-" ]]
}

# Check if file was modified by specific system processes
# DISABLED - Too fuzzy for user preference
is_system_process_modified() {
    local file="$1"
    
    # COMMENTED OUT - User wants only guaranteed hardcoded patterns
    # # Check file headers for system service signatures
    # if [[ -f "$file" ]]; then
    #     # CUPS files
    #     if sudo head -n 3 "$file" 2>/dev/null | grep -q "Written by cupsd"; then
    #         return 0
    #     fi
    #     
    #     # CUPS PPD files (PostScript Printer Description)
    #     if sudo head -n 3 "$file" 2>/dev/null | grep -q "PPD-Adobe\|PostScript\|Printer"; then
    #         return 0
    #     fi
    #     
    #     # Systemd files
    #     if sudo head -n 3 "$file" 2>/dev/null | grep -q "systemd"; then
    #         return 0
    #     fi
    #     
    #     # Package manager files
    #     if sudo head -n 3 "$file" 2>/dev/null | grep -q "dpkg\|apt\|package"; then
    #         return 0
    #     fi
    # fi
    
    return 1
}

# Check if file is a system account file
# DISABLED - Too fuzzy for user preference
is_system_account_file() {
    local file="$1"
    
    # COMMENTED OUT - User wants only guaranteed hardcoded patterns
    # case "$file" in
    #     "/etc/passwd"|"/etc/passwd-"|"/etc/group"|"/etc/group-"|"/etc/gshadow"|"/etc/gshadow-"|"/etc/shadow"|"/etc/shadow-")
    #         return 0
    #         ;;
    # esac
    return 1
}

# Check if system account file was modified by system tools
# DISABLED - Too fuzzy for user preference
is_system_account_modification() {
    local file="$1"
    
    # COMMENTED OUT - User wants only guaranteed hardcoded patterns
    # if is_system_account_file "$file"; then
    #     # Check if there's a corresponding backup file (indicates system tool usage)
    #     local backup_file=""
    #     case "$file" in
    #         "/etc/passwd") backup_file="/etc/passwd-" ;;
    #         "/etc/group") backup_file="/etc/group-" ;;
    #         "/etc/gshadow") backup_file="/etc/gshadow-" ;;
    #         "/etc/shadow") backup_file="/etc/shadow-" ;;
    #     esac
    #     
    #     # If backup exists, it was likely modified by system tools
    #     if [[ -n "$backup_file" && -f "$backup_file" ]]; then
    #         return 0
    #     fi
    #     
    #     # Check modification time - if very recent, likely system
    #     local mod_time=$(stat -c '%Y' "$file" 2>/dev/null || echo "0")
    #     local current_time=$(date +%s)
    #     local hour_ago=$((current_time - 3600))
    #     
    #     if [[ $mod_time -gt $hour_ago ]]; then
    #         return 0
    #     fi
    # fi
    
    return 1
}

# Check if file matches system patterns
matches_system_pattern() {
    local file="$1"
    
    for pattern in "${SYSTEM_PATTERNS[@]}"; do
        # Use eval to expand glob patterns
        if eval "[[ '$file' == $pattern ]]"; then
            return 0
        fi
    done
    return 1
}

# Check if file matches user patterns
matches_user_pattern() {
    local file="$1"
    
    for pattern in "${USER_PATTERNS[@]}"; do
        # Use eval to expand glob patterns
        if eval "[[ '$file' == $pattern ]]"; then
            return 0
        fi
    done
    return 1
}

# Check modification patterns (timestamps, incremental changes)
has_system_modification_pattern() {
    local file="$1"
    
    # Check if modification time matches system activity patterns
    local mod_time=$(stat -c '%Y' "$file" 2>/dev/null || echo "0")
    local mod_date=$(date -d "@$mod_time" '+%Y-%m-%d %H:%M:%S' 2>/dev/null || echo "")
    
    # Check for recent modifications (within last hour) - likely system
    local current_time=$(date +%s)
    local hour_ago=$((current_time - 3600))
    
    if [[ $mod_time -gt $hour_ago ]]; then
        # Check if it's a known system file
        if matches_system_pattern "$file"; then
            return 0
        fi
    fi
    
    return 1
}

# Check file content for system vs user signatures
has_user_content_signatures() {
    local file="$1"
    
    if [[ -f "$file" ]]; then
        # Look for user-specific content patterns
        if sudo grep -q "gorilla\|clean-pi\|custom\|# Added by user\|# User modification" "$file" 2>/dev/null; then
            return 0
        fi
        
        # Check for manual configuration patterns
        if sudo grep -q "PARTUUID.*gorilla\|PARTUUID.*clean-pi" "$file" 2>/dev/null; then
            return 0
        fi
    fi
    
    return 1
}

# Check if file was modified after system backup
was_modified_after_system_backup() {
    local file="$1"
    local backup_file=""
    
    # Find the backup file
    if [[ -f "${file}.O" ]]; then
        backup_file="${file}.O"
    elif [[ -f "${file}-" ]]; then
        backup_file="${file}-"
    elif [[ -f "${file}.bak" ]]; then
        backup_file="${file}.bak"
    elif [[ -f "${file}.orig" ]]; then
        backup_file="${file}.orig"
    fi
    
    if [[ -n "$backup_file" && -f "$backup_file" ]]; then
        local file_time=$(stat -c '%Y' "$file" 2>/dev/null || echo "0")
        local backup_time=$(stat -c '%Y' "$backup_file" 2>/dev/null || echo "0")
        
        # If main file is newer than backup, it was modified after system backup
        [[ $file_time -gt $backup_time ]]
    else
        return 1
    fi
}

# Check if file content differs from system backup
differs_from_system_backup() {
    local file="$1"
    local backup_file=""
    
    # Find the backup file
    if [[ -f "${file}.O" ]]; then
        backup_file="${file}.O"
    elif [[ -f "${file}-" ]]; then
        backup_file="${file}-"
    elif [[ -f "${file}.bak" ]]; then
        backup_file="${file}.bak"
    elif [[ -f "${file}.orig" ]]; then
        backup_file="${file}.orig"
    fi
    
    if [[ -n "$backup_file" && -f "$backup_file" ]]; then
        # Use cmp for binary-safe comparison
        ! cmp -s "$file" "$backup_file" 2>/dev/null
    else
        return 1
    fi
}

# === MAIN CLASSIFICATION FUNCTION ===
classify_modification_source() {
    local file="$1"
    local result=""
    
    # PRIORITY 1: Check for user content signatures (highest priority)
    if has_user_content_signatures "$file"; then
        result="USER"
    # PRIORITY 2: Check for system process signatures (very high priority)
    elif is_system_process_modified "$file"; then
        result="SYSTEM"
    # PRIORITY 3: Check for system account file modifications
    elif is_system_account_modification "$file"; then
        result="SYSTEM"
    # PRIORITY 4: Check if file was modified after system backup
    elif has_system_backup "$file" && was_modified_after_system_backup "$file"; then
        # File has system backup BUT was modified after - likely user modification
        if differs_from_system_backup "$file"; then
            result="USER"
        else
            result="SYSTEM"
        fi
    # PRIORITY 5: Check system modification patterns
    elif has_system_modification_pattern "$file"; then
        result="SYSTEM"
    # PRIORITY 6: Pattern matching fallback
    else
        if matches_system_pattern "$file"; then
            result="SYSTEM"
        elif matches_user_pattern "$file"; then
            result="USER"
        else
            # Default to UNKNOWN if no pattern matches
            result="UNKNOWN"
        fi
    fi
    
    echo "$result"
}

# === EXCLUSION FUNCTIONS ===
should_exclude_file() {
    local file="$1"
    local classification="$2"
    
    # Exclude system files by default (they're not user modifications)
    if [[ "$classification" == "SYSTEM" ]]; then
        return 0  # Exclude
    fi
    
    # Don't exclude user or unknown files
    return 1  # Don't exclude
}

# Get exclusion reason for reporting
get_exclusion_reason() {
    local file="$1"
    local classification="$2"
    
    case "$classification" in
        "SYSTEM")
            if is_system_account_modification "$file"; then
                echo "System account file modification"
            elif has_system_backup "$file" && ! was_modified_after_system_backup "$file"; then
                echo "System file (unchanged since backup)"
            elif is_system_process_modified "$file"; then
                echo "System process modified"
            elif has_system_modification_pattern "$file"; then
                echo "System modification pattern"
            else
                echo "System file (pattern match)"
            fi
            ;;
        "USER")
            if has_system_backup "$file" && was_modified_after_system_backup "$file"; then
                echo "User modification (modified after system backup)"
            elif has_user_content_signatures "$file"; then
                echo "User modification (content signatures)"
            else
                echo "User modification"
            fi
            ;;
        "UNKNOWN")
            echo "Unknown source"
            ;;
    esac
}

