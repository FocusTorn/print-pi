##> FILE DETOUR MANAGER CONFIGURATION
 # Unified configuration for all file detours, includes, and system management
 # 
 # This file defines how your custom files are transparently detoured over the
 # original framework files, allowing for easy updates and clean separation.
 #
 # CLI COMMANDS (Global command available):
 #   detour apply    - Creates all file redirects, adds include directives, manages services
 #                     (bind mounts custom files, adds includes to originals, restarts services)
 #   detour remove   - Removes all file redirects, removes include directives, stops services
 #                     (unmounts bind mounts, removes include lines from originals)
 #   detour status   - Shows current system state (which files are redirected/included)
 #                     (displays active redirects, includes, and service states)
 #   detour init     - Copies original file to custom location for editing
 #                     (copy original → edit custom → apply redirect)
 #   detour help     - Shows detailed usage information and examples
 #
 # EXAMPLES:
 #   sudo detour apply
 #   sudo detour init /boot/firmware/config.txt /home/pi/3dp-mods/Boot_Config/config-mods.txt
 #   sudo detour status
 #
 #>

# ┌────────────────────────────────────────────────────────────────────────────────────────────────┐
# │                                 FILE DETOURS (Bind Mounts)                                   │
# └────────────────────────────────────────────────────────────────────────────────────────────────┘
## DOCUMENTATION: #>
 #
 # DESCRIPTION:
 #   Creates transparent file redirection using bind mounts. When applications
 #   read the original file, they actually get your custom version. The original
 #   framework files remain completely untouched and can be safely updated.
 #
 # SYNTAX:
 #   detour <original_file_path> = <detour_path>
 #
 # HOW IT WORKS:
 #   - Original file: /home/pi/printer_data/config/printer.cfg
 #   - Custom file: /home/pi/3dp-mods/PrinterData_Config/printer.cfg  
 #   - Result: Reading original gets custom content transparently
 #
 # BENEFITS:
 #   - Framework updates don't affect your customizations
 #   - Complete separation of concerns
 #   - Easy rollback by removing redirect
 #   - Version control only your custom files
 #
 #<

# 3D Printer Configuration Files
detour /home/pi/printer_data/config/printer.cfg = /home/pi/3dp-mods/PrinterData_Config/printer.cfg
detour /home/pi/printer_data/config/mainsail.cfg = /home/pi/3dp-mods/PrinterData_Config/mainsail.cfg
detour /home/pi/printer_data/config/moonraker.conf = /home/pi/3dp-mods/PrinterData_Config/moonraker.conf

# ┌────────────────────────────────────────────────────────────────────────────────────────────────┐
# │                                   INCLUDE DIRECTIVES                                          │
# └────────────────────────────────────────────────────────────────────────────────────────────────┘
## DOCUMENTATION: #>
 #
 # DESCRIPTION:
 #   Programmatically injects include statements into existing files. This allows
 #   you to extend configuration files without modifying their core content.
 #   The original files remain intact except for the added include line.
 #
 # SYNTAX:
 #   include <target_file_path> : <include_file_path>
 #
 # HOW IT WORKS:
 #   - Target file: /boot/firmware/config.txt
 #   - Include file: /home/pi/3dp-mods/Boot_Config/boot-config-mods.txt
 #   - Result: Adds "include boot-config-mods.txt" to the end of config.txt
 #
 # IMPORTANT NOTES:
 #   - For boot configuration changes, a system reboot is required for changes
 #     in the included file to take effect (not just for adding the include)
 #   - Include directives are added to the end of the target file
 #   - Duplicate includes are automatically prevented
 #
 # BENEFITS:
 #   - Extend system files without modification
 #   - Easy removal of customizations
 #   - Framework updates preserve your includes
 #   - Clean separation of system and custom configs
 #
 #<

# Boot Configuration Includes
include /boot/firmware/config.txt : /home/pi/3dp-mods/Boot_Config/boot-config-mods.txt

# ┌────────────────────────────────────────────────────────────────────────────────────────────────┐
# │                                  SERVICE MANAGEMENT                                           │
# └────────────────────────────────────────────────────────────────────────────────────────────────┘
## DOCUMENTATION: #>
 #
 # DESCRIPTION:
 #   Manages system services as part of the overlay application process.
 #   Services are automatically started/stopped/restarted when applying or
 #   removing overlays to ensure configurations take effect.
 #
 # SYNTAX:
 #   service <service_name> : <action>
 #
 # AVAILABLE ACTIONS:
 #   start   - Start the service
 #   stop    - Stop the service  
 #   restart - Restart the service (stop then start)
 #   reload  - Reload service configuration without stopping
 #
 # HOW IT WORKS:
 #   - When applying overlays: services are restarted to pick up changes
 #   - When removing overlays: services are stopped to revert to defaults
 #   - Service management is automatic and integrated with overlay operations
 #
 # BENEFITS:
 #   - Automatic service management
 #   - Ensures configurations take effect immediately
 #   - Integrated with overlay lifecycle
 #   - No manual service management required
 #
 #<

# 3D Printer Services
service klipper : restart
service moonraker : restart
service mainsail : restart
